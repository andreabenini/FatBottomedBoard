C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD\LCD.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\LCD.lst) OBJECT(LCD.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include <font\font.h>
   4          #include <sys\sys.h>
   5          #include <lcd\lcd.h>
   6          
   7          unsigned char bdata bitdata;
   8          sbit bit7=bitdata^7;
   9          sbit bit6=bitdata^6;
  10          sbit bit5=bitdata^5;
  11          sbit bit4=bitdata^4;
  12          sbit bit3=bitdata^3;
  13          sbit bit2=bitdata^2;
  14          sbit bit1=bitdata^1;
  15          sbit bit0=bitdata^0;
  16          
  17          u16 BACK_COLOR, POINT_COLOR;   //背景色，画笔色   
  18          void LCD_Writ_Bus(char da)   //串行数据写入
  19          {       
  20   1              bitdata=da;
  21   1              LCD_SDA=bit7;LCD_SCK=0;LCD_SCK=1;
  22   1              LCD_SDA=bit6;LCD_SCK=0;LCD_SCK=1;
  23   1              LCD_SDA=bit5;LCD_SCK=0;LCD_SCK=1;
  24   1              LCD_SDA=bit4;LCD_SCK=0;LCD_SCK=1;
  25   1              LCD_SDA=bit3;LCD_SCK=0;LCD_SCK=1;
  26   1              LCD_SDA=bit2;LCD_SCK=0;LCD_SCK=1;
  27   1              LCD_SDA=bit1;LCD_SCK=0;LCD_SCK=1;
  28   1              LCD_SDA=bit0;LCD_SCK=0;LCD_SCK=1; 
  29   1      } 
  30          void LCD_WR_DATA8(char da) //发送数据-8位参数
  31          {
  32   1          LCD_AO=1;
  33   1              LCD_Writ_Bus(da);
  34   1      }  
  35           void LCD_WR_DATA(int da)
  36          {
  37   1          LCD_AO=1;
  38   1              LCD_Writ_Bus(da>>8);
  39   1              LCD_Writ_Bus(da);
  40   1      }         
  41          void LCD_WR_REG(char da)         
  42          {
  43   1          LCD_AO=0;
  44   1              LCD_Writ_Bus(da);
  45   1      }
  46           void LCD_WR_REG_DATA(int reg,int da)
  47          {
  48   1          LCD_WR_REG(reg);
  49   1              LCD_WR_DATA(da);
  50   1      }
  51          void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
  52          {  
  53   1         LCD_WR_REG(0x2a);
  54   1         LCD_WR_DATA8(x1>>8);
  55   1         LCD_WR_DATA8(x1);
C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 2   

  56   1         LCD_WR_DATA8(x2>>8);
  57   1         LCD_WR_DATA8(x2);
  58   1        
  59   1         LCD_WR_REG(0x2b);
  60   1         LCD_WR_DATA8(y1>>8);
  61   1         LCD_WR_DATA8(y1);
  62   1         LCD_WR_DATA8(y2>>8);
  63   1         LCD_WR_DATA8(y2);
  64   1      
  65   1         LCD_WR_REG(0x2C);
  66   1      
  67   1      }
  68          void Lcd_Init(void)
  69          {
  70   1      
  71   1      //调用一次这些函数，免得编译的时候提示警告
  72   1              LCD_CS =1;
  73   1              if(LCD_CS==0)
  74   1              {
  75   2                 LCD_WR_REG_DATA(0,0);
  76   2                 LCD_ShowString(0,0," ");
  77   2                 LCD_ShowNum(0,0,0,0);
  78   2                 LCD_Show2Num(0,0,0,0);
  79   2                 LCD_DrawPoint_big(0,0);
  80   2                 LCD_DrawRectangle(0,0,0,0);
  81   2                 Draw_Circle(0,0,0);
  82   2               }
  83   1      
  84   1          LCD_REST=1;
  85   1          delayms(5); 
  86   1              LCD_REST=0;
  87   1              delayms(5);
  88   1              LCD_REST=1;
  89   1              LCD_CS=1; 
  90   1              delayms(5);
  91   1              LCD_CS =0;  //打开片选使能
  92   1      
  93   1              LCD_WR_REG(0x11); //Sleep out
  94   1              delayms(120); //Delay 120ms
  95   1              //------------------------------------ST7735S Frame Rate-----------------------------------------//
  96   1              LCD_WR_REG(0xB1);
  97   1              LCD_WR_DATA8(0x05);
  98   1              LCD_WR_DATA8(0x3C);
  99   1              LCD_WR_DATA8(0x3C);
 100   1              LCD_WR_REG(0xB2);
 101   1              LCD_WR_DATA8(0x05);
 102   1              LCD_WR_DATA8(0x3C);
 103   1              LCD_WR_DATA8(0x3C);
 104   1              LCD_WR_REG(0xB3);
 105   1              LCD_WR_DATA8(0x05);
 106   1              LCD_WR_DATA8(0x3C);
 107   1              LCD_WR_DATA8(0x3C);
 108   1              LCD_WR_DATA8(0x05);
 109   1              LCD_WR_DATA8(0x3C);
 110   1              LCD_WR_DATA8(0x3C);
 111   1              //------------------------------------End ST7735S Frame Rate-----------------------------------------//
 112   1              LCD_WR_REG(0xB4); //Dot inversion
 113   1              LCD_WR_DATA8(0x03);
 114   1              LCD_WR_REG(0xC0);
 115   1              LCD_WR_DATA8(0x28);
 116   1              LCD_WR_DATA8(0x08);
 117   1              LCD_WR_DATA8(0x04);
C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 3   

 118   1              LCD_WR_REG(0xC1);
 119   1              LCD_WR_DATA8(0XC0);
 120   1              LCD_WR_REG(0xC2);
 121   1              LCD_WR_DATA8(0x0D);
 122   1              LCD_WR_DATA8(0x00);
 123   1              LCD_WR_REG(0xC3);
 124   1              LCD_WR_DATA8(0x8D);
 125   1              LCD_WR_DATA8(0x2A);
 126   1              LCD_WR_REG(0xC4);
 127   1              LCD_WR_DATA8(0x8D);
 128   1              LCD_WR_DATA8(0xEE);
 129   1              //---------------------------------End ST7735S Power Sequence-------------------------------------//
 130   1              LCD_WR_REG(0xC5); //VCOM
 131   1              LCD_WR_DATA8(0x1A);
 132   1              LCD_WR_REG(0x36); //MX, MY, RGB mode
 133   1              LCD_WR_DATA8(0xC0);
 134   1              //------------------------------------ST7735S Gamma Sequence-----------------------------------------//
 135   1              LCD_WR_REG(0xE0);
 136   1              LCD_WR_DATA8(0x04);
 137   1              LCD_WR_DATA8(0x22);
 138   1              LCD_WR_DATA8(0x07);
 139   1              LCD_WR_DATA8(0x0A);
 140   1              LCD_WR_DATA8(0x2E);
 141   1              LCD_WR_DATA8(0x30);
 142   1              LCD_WR_DATA8(0x25);
 143   1              LCD_WR_DATA8(0x2A);
 144   1              LCD_WR_DATA8(0x28);
 145   1              LCD_WR_DATA8(0x26);
 146   1              LCD_WR_DATA8(0x2E);
 147   1              LCD_WR_DATA8(0x3A);
 148   1              LCD_WR_DATA8(0x00);
 149   1              LCD_WR_DATA8(0x01);
 150   1              LCD_WR_DATA8(0x03);
 151   1              LCD_WR_DATA8(0x13);
 152   1              LCD_WR_REG(0xE1);
 153   1              LCD_WR_DATA8(0x04);
 154   1              LCD_WR_DATA8(0x16);
 155   1              LCD_WR_DATA8(0x06);
 156   1              LCD_WR_DATA8(0x0D);
 157   1              LCD_WR_DATA8(0x2D);
 158   1              LCD_WR_DATA8(0x26);
 159   1              LCD_WR_DATA8(0x23);
 160   1              LCD_WR_DATA8(0x27);
 161   1              LCD_WR_DATA8(0x27);
 162   1              LCD_WR_DATA8(0x25);
 163   1              LCD_WR_DATA8(0x2D);
 164   1              LCD_WR_DATA8(0x3B);
 165   1              LCD_WR_DATA8(0x00);
 166   1              LCD_WR_DATA8(0x01);
 167   1              LCD_WR_DATA8(0x04);
 168   1              LCD_WR_DATA8(0x13);
 169   1              //------------------------------------End ST7735S Gamma Sequence-----------------------------------------
             -//
 170   1              LCD_WR_REG(0x3A); //65k mode
 171   1              LCD_WR_DATA8(0x05);
 172   1              LCD_WR_REG(0x29); //Display on
 173   1      
 174   1      }
 175          //清屏函数
 176          //Color:要清屏的填充色
 177          void LCD_Clear(u16 Color)
 178          {
C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 4   

 179   1              u8 VH,VL;
 180   1              u16 i,j;
 181   1              VH=Color>>8;
 182   1              VL=Color;       
 183   1              Address_set(0,0,LCD_W-1,LCD_H-1);
 184   1          for(i=0;i<LCD_W;i++)
 185   1               {
 186   2                for (j=0;j<LCD_H;j++)
 187   2                      {
 188   3                       LCD_WR_DATA8(VH);
 189   3                               LCD_WR_DATA8(VL);      
 190   3      
 191   3                  }
 192   2      
 193   2                }
 194   1      }
 195          //在指定位置显示一个汉字(32*33大小)
 196          //dcolor为内容颜色，gbcolor为背静颜色
 197          void showhanzi(unsigned int x,unsigned int y,unsigned char index)       
 198          {  
 199   1              unsigned char i,j;
 200   1              unsigned char *temp=hanzi;    
 201   1          Address_set(x,y,x+31,y+31); //设置区域      
 202   1              temp+=index*128;        
 203   1              for(j=0;j<128;j++)
 204   1              {
 205   2                      for(i=0;i<8;i++)
 206   2                      {                    
 207   3                              if((*temp&(1<<i))!=0)
 208   3                              {
 209   4                                      LCD_WR_DATA(POINT_COLOR);
 210   4                              } 
 211   3                              else
 212   3                              {
 213   4                                      LCD_WR_DATA(BACK_COLOR);
 214   4                              }   
 215   3                      }
 216   2                      temp++;
 217   2               }
 218   1      }
 219          //画点
 220          //POINT_COLOR:此点的颜色
 221          void LCD_DrawPoint(u16 x,u16 y)
 222          {
 223   1              Address_set(x,y,x,y);//设置光标位置 
 224   1              LCD_WR_DATA(POINT_COLOR);           
 225   1      }        
 226          //画一个大点
 227          //POINT_COLOR:此点的颜色
 228          void LCD_DrawPoint_big(u16 x,u16 y)
 229          {
 230   1              LCD_Fill(x-1,y-1,x+1,y+1,POINT_COLOR);
 231   1      } 
 232          //在指定区域内填充指定颜色
 233          //区域大小:
 234          //  (xend-xsta)*(yend-ysta)
 235          void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
 236          {          
 237   1              u16 i,j; 
 238   1              Address_set(xsta,ysta,xend,yend);      //设置光标位置 
 239   1              for(i=ysta;i<=yend;i++)
 240   1              {                                                                                                                       
C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 5   

 241   2                      for(j=xsta;j<=xend;j++)LCD_WR_DATA(color);//设置光标位置            
 242   2              }                                                   
 243   1      }  
 244          //画线
 245          //x1,y1:起点坐标
 246          //x2,y2:终点坐标  
 247          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
 248          {
 249   1              u16 t; 
 250   1              int xerr=0,yerr=0,delta_x,delta_y,distance; 
 251   1              int incx,incy,uRow,uCol; 
 252   1      
 253   1              delta_x=x2-x1; //计算坐标增量 
 254   1              delta_y=y2-y1; 
 255   1              uRow=x1; 
 256   1              uCol=y1; 
 257   1              if(delta_x>0)incx=1; //设置单步方向 
 258   1              else if(delta_x==0)incx=0;//垂直线 
 259   1              else {incx=-1;delta_x=-delta_x;} 
 260   1              if(delta_y>0)incy=1; 
 261   1              else if(delta_y==0)incy=0;//水平线 
 262   1              else{incy=-1;delta_y=-delta_y;} 
 263   1              if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 264   1              else distance=delta_y; 
 265   1              for(t=0;t<=distance+1;t++ )//画线输出 
 266   1              {  
 267   2                      LCD_DrawPoint(uRow,uCol);//画点 
 268   2                      xerr+=delta_x ; 
 269   2                      yerr+=delta_y ; 
 270   2                      if(xerr>distance) 
 271   2                      { 
 272   3                              xerr-=distance; 
 273   3                              uRow+=incx; 
 274   3                      } 
 275   2                      if(yerr>distance) 
 276   2                      { 
 277   3                              yerr-=distance; 
 278   3                              uCol+=incy; 
 279   3                      } 
 280   2              }  
 281   1      }    
 282          //画矩形
 283          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
 284          {
 285   1              LCD_DrawLine(x1,y1,x2,y1);
 286   1              LCD_DrawLine(x1,y1,x1,y2);
 287   1              LCD_DrawLine(x1,y2,x2,y2);
 288   1              LCD_DrawLine(x2,y1,x2,y2);
 289   1      }
 290          //在指定位置画一个指定大小的圆
 291          //(x,y):中心点
 292          //r    :半径
 293          void Draw_Circle(u16 x0,u16 y0,u8 r)
 294          {
 295   1              int a,b;
 296   1              int di;
 297   1              a=0;b=r;          
 298   1              di=3-(r<<1);             //判断下个点位置的标志
 299   1              while(a<=b)
 300   1              {
 301   2                      LCD_DrawPoint(x0-b,y0-a);             //3           
 302   2                      LCD_DrawPoint(x0+b,y0-a);             //0           
C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 6   

 303   2                      LCD_DrawPoint(x0-a,y0+b);             //1       
 304   2                      LCD_DrawPoint(x0-b,y0-a);             //7           
 305   2                      LCD_DrawPoint(x0-a,y0-b);             //2             
 306   2                      LCD_DrawPoint(x0+b,y0+a);             //4               
 307   2                      LCD_DrawPoint(x0+a,y0-b);             //5
 308   2                      LCD_DrawPoint(x0+a,y0+b);             //6 
 309   2                      LCD_DrawPoint(x0-b,y0+a);             
 310   2                      a++;
 311   2                      //使用Bresenham算法画圆     
 312   2                      if(di<0)di +=4*a+6;       
 313   2                      else
 314   2                      {
 315   3                              di+=10+4*(a-b);   
 316   3                              b--;
 317   3                      } 
 318   2                      LCD_DrawPoint(x0+a,y0+b);
 319   2              }
 320   1      } 
 321          //在指定位置显示一个字符
 322          
 323          //num:要显示的字符:" "--->"~"
 324          //mode:叠加方式(1)还是非叠加方式(0)
 325          //在指定位置显示一个字符
 326          
 327          //num:要显示的字符:" "--->"~"
 328          
 329          //mode:叠加方式(1)还是非叠加方式(0)
 330          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 mode)
 331          {
 332   1          u8 temp;
 333   1          u8 pos,t;
 334   1              u16 x0=x;
 335   1              u16 colortemp=POINT_COLOR;      
 336   1          if(x>LCD_W-16||y>LCD_H-16)return;       
 337   1              //设置窗口                 
 338   1              num=num-' ';//得到偏移后的值
 339   1              Address_set(x,y,x+8-1,y+16-1);      //设置光标位置 
 340   1              if(!mode) //非叠加方式
 341   1              {
 342   2                      for(pos=0;pos<16;pos++)
 343   2                      { 
 344   3                              temp=asc2_1608[(u16)num*16+pos];                 //调用1608字体
 345   3                              for(t=0;t<8;t++)
 346   3                          {                 
 347   4                              if(temp&0x01)POINT_COLOR=colortemp;
 348   4                                      else POINT_COLOR=BACK_COLOR;
 349   4                                      LCD_WR_DATA(POINT_COLOR);       
 350   4                                      temp>>=1; 
 351   4                                      x++;
 352   4                          }
 353   3                              x=x0;
 354   3                              y++;
 355   3                      }       
 356   2              }else//叠加方式
 357   1              {
 358   2                      for(pos=0;pos<16;pos++)
 359   2                      {
 360   3                          temp=asc2_1608[(u16)num*16+pos];             //调用1608字体
 361   3                              for(t=0;t<8;t++)
 362   3                          {                 
 363   4                              if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//画一个点     
 364   4                              temp>>=1; 
C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 7   

 365   4                          }
 366   3                      }
 367   2              }
 368   1              POINT_COLOR=colortemp;                            
 369   1      }   
 370          //m^n函数
 371          u32 mypow(u8 m,u8 n)
 372          {
 373   1              u32 result=1;    
 374   1              while(n--)result*=m;    
 375   1              return result;
 376   1      }                        
 377          //显示2个数字
 378          //x,y :起点坐标  
 379          //len :数字的位数
 380          //color:颜色
 381          //num:数值(0~4294967295);       
 382          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len)
 383          {               
 384   1              u8 t,temp;
 385   1              u8 enshow=0;
 386   1              num=(u16)num;
 387   1              for(t=0;t<len;t++)
 388   1              {
 389   2                      temp=(num/mypow(10,len-t-1))%10;
 390   2                      if(enshow==0&&t<(len-1))
 391   2                      {
 392   3                              if(temp==0)
 393   3                              {
 394   4                                      LCD_ShowChar(x+8*t,y,' ',0);
 395   4                                      continue;
 396   4                              }else enshow=1; 
 397   3                               
 398   3                      }
 399   2                      LCD_ShowChar(x+8*t,y,temp+48,0); 
 400   2              }
 401   1      } 
 402          //显示2个数字
 403          //x,y:起点坐标
 404          //num:数值(0~99);        
 405          void LCD_Show2Num(u16 x,u16 y,u16 num,u8 len)
 406          {               
 407   1              u8 t,temp;                                                 
 408   1              for(t=0;t<len;t++)
 409   1              {
 410   2                      temp=(num/mypow(10,len-t-1))%10;
 411   2                      LCD_ShowChar(x+8*t,y,temp+'0',0); 
 412   2              }
 413   1      } 
 414          //显示字符串
 415          //x,y:起点坐标  
 416          //*p:字符串起始地址
 417          //用16字体
 418          void LCD_ShowString(u16 x,u16 y,const u8 *p)
 419          {         
 420   1          while(*p!='\0')
 421   1          {       
 422   2              if(x>LCD_W-16){x=0;y+=16;}
 423   2              if(y>LCD_H-16){y=x=0;}
 424   2              LCD_ShowChar(x,y,*p,0);
 425   2              x+=8;
 426   2              p++;
C51 COMPILER V9.01   LCD                                                                   06/20/2013 09:08:57 PAGE 8   

 427   2          }  
 428   1      }
 429          
 430          
 431          
 432          
 433          
 434          
 435          
 436          
 437          
 438          
 439          
 440          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3339    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =      4     123
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
